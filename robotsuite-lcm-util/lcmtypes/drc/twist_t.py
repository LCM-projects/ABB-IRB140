"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

import cStringIO as StringIO
import struct

import vector_3d_t

class twist_t(object):
    __slots__ = ["linear_velocity", "angular_velocity"]

    def __init__(self):
        self.linear_velocity = None
        self.angular_velocity = None

    def encode(self):
        buf = StringIO.StringIO()
        buf.write(twist_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.linear_velocity._get_packed_fingerprint() == vector_3d_t.vector_3d_t._get_packed_fingerprint()
        self.linear_velocity._encode_one(buf)
        assert self.angular_velocity._get_packed_fingerprint() == vector_3d_t.vector_3d_t._get_packed_fingerprint()
        self.angular_velocity._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = StringIO.StringIO(data)
        if buf.read(8) != twist_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return twist_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = twist_t()
        self.linear_velocity = vector_3d_t.vector_3d_t._decode_one(buf)
        self.angular_velocity = vector_3d_t.vector_3d_t._decode_one(buf)
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if twist_t in parents: return 0
        newparents = parents + [twist_t]
        tmphash = (0x558634eaba4f1769+ vector_3d_t.vector_3d_t._get_hash_recursive(newparents)+ vector_3d_t.vector_3d_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if twist_t._packed_fingerprint is None:
            twist_t._packed_fingerprint = struct.pack(">Q", twist_t._get_hash_recursive([]))
        return twist_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

